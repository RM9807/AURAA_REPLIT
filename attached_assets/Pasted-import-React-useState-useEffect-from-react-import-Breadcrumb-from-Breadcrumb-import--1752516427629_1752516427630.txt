import React, { useState, useEffect } from 'react';
import Breadcrumb from './Breadcrumb';
import { 
  ArrowRight, 
  ArrowLeft, 
  Camera, 
  Upload,
  X,
  Plus,
  Check,
  AlertCircle,
  Info,
  Sparkles,
  Shirt,
  Search,
  Filter,
  Grid3X3,
  List,
  ChevronLeft,
  ChevronRight,
  ThumbsUp,
  ThumbsDown,
  Scissors,
  ShoppingBag,
  Target,
  TrendingUp,
  Package
} from 'lucide-react';

interface WardrobeTransformationProps {
  userName?: string;
  userGender?: string;
  onComplete?: (wardrobeData: any) => void;
  onBack?: () => void;
}

interface WardrobeItem {
  id: string;
  image_url: string;
  category: string;
  pattern?: string;
  material?: string;
  brand?: string;
  season?: string;
  notes?: string;
  ai_suggestion?: 'keep' | 'alter' | 'discard';
  ai_reason?: string;
  user_decision?: 'keep' | 'alter' | 'discard';
  created_at: string;
  isExisting?: boolean;
  isNew?: boolean;
}

interface GapMapItem {
  item: string;
  reason: string;
  priority: 'high' | 'medium' | 'low';
}

interface WellStockedCategory {
  category: string;
  count: number;
  status: 'perfect' | 'consider-reducing' | 'well-stocked';
  message: string;
}

const WardrobeTransformation: React.FC<WardrobeTransformationProps> = ({ 
  userName = "there", 
  userGender = "",
  onComplete,
  onBack 
}) => {
  const [currentView, setCurrentView] = useState<'existing-inventory' | 'new-upload' | 'ai-analysis' | 'declutter-decisions' | 'gap-map' | 'final-inventory'>('existing-inventory');
  const [existingItems, setExistingItems] = useState<WardrobeItem[]>([]);
  const [newItems, setNewItems] = useState<WardrobeItem[]>([]);
  const [allItems, setAllItems] = useState<WardrobeItem[]>([]);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [gapMapItems, setGapMapItems] = useState<GapMapItem[]>([]);
  const [wellStockedCategories, setWellStockedCategories] = useState<WellStockedCategory[]>([]);

  // Breadcrumb navigation items
  const getBreadcrumbItems = () => {
    const items = [
      { 
        label: 'Home', 
        onClick: () => {
          console.log('Navigate to home');
        }
      },
      { 
        label: 'Choose Step', 
        onClick: onBack
      }
    ];

    switch (currentView) {
      case 'existing-inventory':
        items.push({ label: 'Wardrobe Inventory', isActive: true });
        break;
      case 'new-upload':
        items.push({ 
          label: 'Wardrobe Inventory', 
          onClick: () => setCurrentView('existing-inventory')
        });
        items.push({ label: 'Upload New Items', isActive: true });
        break;
      case 'ai-analysis':
        items.push({ 
          label: 'Wardrobe Inventory', 
          onClick: () => setCurrentView('existing-inventory')
        });
        items.push({ label: 'AI Analysis', isActive: true });
        break;
      case 'declutter-decisions':
        items.push({ 
          label: 'Wardrobe Inventory', 
          onClick: () => setCurrentView('existing-inventory')
        });
        items.push({ label: 'Declutter Decisions', isActive: true });
        break;
      case 'gap-map':
        items.push({ 
          label: 'Wardrobe Inventory', 
          onClick: () => setCurrentView('existing-inventory')
        });
        items.push({ label: 'Wardrobe Gap Map', isActive: true });
        break;
      case 'final-inventory':
        items.push({ 
          label: 'Wardrobe Inventory', 
          onClick: () => setCurrentView('existing-inventory')
        });
        items.push({ label: 'Complete Wardrobe', isActive: true });
        break;
      default:
        items.push({ label: 'Wardrobe Transformation', isActive: true });
        break;
    }

    return items;
  };

  // Load existing wardrobe items (mock data for now)
  useEffect(() => {
    const mockExistingItems: WardrobeItem[] = [
      {
        id: 'existing-1',
        image_url: 'https://images.pexels.com/photos/1926769/pexels-photo-1926769.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'tops',
        pattern: 'solid',
        material: 'cotton',
        brand: 'Zara',
        season: 'all-season',
        notes: 'Favorite white shirt',
        created_at: '2024-01-15',
        isExisting: true
      },
      {
        id: 'existing-2',
        image_url: 'https://images.pexels.com/photos/1536619/pexels-photo-1536619.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'outerwear',
        pattern: 'solid',
        material: 'wool',
        brand: 'H&M',
        season: 'winter',
        notes: 'Black blazer for work',
        created_at: '2024-01-10',
        isExisting: true
      },
      {
        id: 'existing-3',
        image_url: 'https://images.pexels.com/photos/1040945/pexels-photo-1040945.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'dresses',
        pattern: 'solid',
        material: 'polyester',
        brand: 'Mango',
        season: 'summer',
        notes: 'Navy dress for events',
        created_at: '2024-01-05',
        isExisting: true
      },
      {
        id: 'existing-4',
        image_url: 'https://images.pexels.com/photos/1926769/pexels-photo-1926769.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'bottoms',
        pattern: 'solid',
        material: 'denim',
        brand: 'Levi\'s',
        season: 'all-season',
        notes: 'Classic blue jeans',
        created_at: '2024-01-01',
        isExisting: true
      },
      {
        id: 'existing-5',
        image_url: 'https://images.pexels.com/photos/1536619/pexels-photo-1536619.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'shoes',
        pattern: 'solid',
        material: 'leather',
        brand: 'Nike',
        season: 'all-season',
        notes: 'White sneakers',
        created_at: '2023-12-20',
        isExisting: true
      },
      {
        id: 'existing-6',
        image_url: 'https://images.pexels.com/photos/1040945/pexels-photo-1040945.jpeg?auto=compress&cs=tinysrgb&w=400&h=600&fit=crop',
        category: 'accessories',
        pattern: 'solid',
        material: 'leather',
        brand: 'Coach',
        season: 'all-season',
        notes: 'Black handbag',
        created_at: '2023-12-15',
        isExisting: true
      }
    ];

    setExistingItems(mockExistingItems);
    setAllItems(mockExistingItems);
  }, []);

  const categories = ['all', 'tops', 'bottoms', 'outerwear', 'dresses', 'shoes', 'accessories'];

  const handleFileUpload = (files: FileList | null) => {
    if (!files) return;
    
    const newFiles = Array.from(files);
    setUploadedFiles(prev => [...prev, ...newFiles]);
    
    // Create wardrobe items from uploaded files
    const newWardrobeItems: WardrobeItem[] = newFiles.map((file, index) => ({
      id: `new-${Date.now()}-${index}`,
      image_url: URL.createObjectURL(file),
      category: 'tops', // Default category
      created_at: new Date().toISOString(),
      isNew: true
    }));
    
    setNewItems(prev => [...prev, ...newWardrobeItems]);
  };

  const updateItemDetails = (itemId: string, updates: Partial<WardrobeItem>) => {
    setNewItems(prev => prev.map(item => 
      item.id === itemId ? { ...item, ...updates } : item
    ));
  };

  const removeNewItem = (itemId: string) => {
    setNewItems(prev => prev.filter(item => item.id !== itemId));
    setUploadedFiles(prev => prev.filter((_, index) => `new-${Date.now()}-${index}` !== itemId));
  };

  const startAIAnalysis = () => {
    setCurrentView('ai-analysis');
    setIsAnalyzing(true);
    setAnalysisProgress(0);
    
    // Simulate AI analysis progress
    const interval = setInterval(() => {
      setAnalysisProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsAnalyzing(false);
          
          // Add AI suggestions to new items
          const itemsWithSuggestions = newItems.map(item => ({
            ...item,
            ai_suggestion: ['keep', 'alter', 'discard'][Math.floor(Math.random() * 3)] as 'keep' | 'alter' | 'discard',
            ai_reason: getRandomReason()
          }));
          
          setNewItems(itemsWithSuggestions);
          setCurrentView('declutter-decisions');
          return 100;
        }
        return prev + 10;
      });
    }, 300);
  };

  const getRandomReason = () => {
    const reasons = [
      "This item complements your existing wardrobe perfectly",
      "Consider altering the fit for a more flattering silhouette",
      "This piece doesn't align with your style profile",
      "Great quality item that will last for years",
      "Similar items in your wardrobe make this redundant",
      "Perfect for your lifestyle and occasions"
    ];
    return reasons[Math.floor(Math.random() * reasons.length)];
  };

  const handleUserDecision = (itemId: string, decision: 'keep' | 'alter' | 'discard') => {
    setNewItems(prev => prev.map(item => 
      item.id === itemId ? { ...item, user_decision: decision } : item
    ));
  };

  const proceedToGapMap = () => {
    // Generate gap map recommendations
    const mockGapMap: GapMapItem[] = [
      {
        item: "Classic White Button-Down Shirt",
        reason: "Essential versatile piece missing from your wardrobe",
        priority: 'high'
      },
      {
        item: "Well-Fitted Blazer",
        reason: "Perfect for professional and smart-casual occasions",
        priority: 'high'
      },
      {
        item: "Quality Leather Bag",
        reason: "Elevates any outfit and provides functionality",
        priority: 'medium'
      },
      {
        item: "Comfortable Versatile Shoes",
        reason: "All-day comfort for various occasions",
        priority: 'medium'
      },
      {
        item: "Versatile Outerwear Piece",
        reason: "Weather-appropriate layering option",
        priority: 'low'
      }
    ];

    const mockWellStocked: WellStockedCategory[] = [
      {
        category: "Casual Tops",
        count: 8,
        status: 'perfect',
        message: "Perfect amount"
      },
      {
        category: "Shoes",
        count: 12,
        status: 'consider-reducing',
        message: "Consider reducing"
      },
      {
        category: "Dresses",
        count: 6,
        status: 'well-stocked',
        message: "Well stocked"
      },
      {
        category: "Accessories",
        count: 4,
        status: 'perfect',
        message: "Good variety"
      }
    ];

    setGapMapItems(mockGapMap);
    setWellStockedCategories(mockWellStocked);
    setCurrentView('gap-map');
  };

  const proceedToFinalInventory = () => {
    // Combine existing items with kept/altered new items
    const keptNewItems = newItems.filter(item => 
      item.user_decision === 'keep' || item.user_decision === 'alter'
    );
    
    setAllItems([...existingItems, ...keptNewItems]);
    setCurrentView('final-inventory');
  };

  const getFilteredItems = (items: WardrobeItem[]) => {
    let filtered = items;
    
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(item => item.category === selectedCategory);
    }
    
    if (searchTerm) {
      filtered = filtered.filter(item => 
        item.category?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.brand?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.material?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.notes?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    return filtered;
  };

  const getSuggestionColor = (suggestion: string) => {
    switch (suggestion) {
      case 'keep': return 'text-green-600 bg-green-100';
      case 'alter': return 'text-yellow-600 bg-yellow-100';
      case 'discard': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getSuggestionIcon = (suggestion: string) => {
    switch (suggestion) {
      case 'keep': return ThumbsUp;
      case 'alter': return Scissors;
      case 'discard': return ThumbsDown;
      default: return Info;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'perfect': return 'text-green-600 bg-green-100';
      case 'well-stocked': return 'text-blue-600 bg-blue-100';
      case 'consider-reducing': return 'text-orange-600 bg-orange-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  // Wardrobe Item Card Component
  const WardrobeItemCard = ({ item, showDecisions = false }: { item: WardrobeItem; showDecisions?: boolean }) => (
    <div className={`bg-white rounded-3xl shadow-sm border border-gray-100 hover:shadow-xl transition-all duration-300 hover:-translate-y-1 ${viewMode === 'list' ? 'p-8' : 'p-6'}`}>
      {/* Item Image */}
      <div className={`relative ${viewMode === 'list' ? 'aspect-[3/4] mb-8' : 'aspect-square mb-6'} bg-gray-200 rounded-2xl overflow-hidden group`}>
        <img 
          src={item.image_url} 
          alt={`${item.category} item`}
          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        />
        
        {/* Item Type Badge */}
        <div className="absolute top-4 left-4">
          {item.isExisting && (
            <span className="px-3 py-1 bg-blue-600 text-white rounded-full font-inter text-xs font-medium">
              Existing
            </span>
          )}
          {item.isNew && (
            <span className="px-3 py-1 bg-green-600 text-white rounded-full font-inter text-xs font-medium">
              New
            </span>
          )}
        </div>

        {/* AI Suggestion Badge */}
        {item.ai_suggestion && (
          <div className="absolute top-4 right-4">
            <span className={`px-3 py-1 rounded-full font-inter text-xs font-medium ${getSuggestionColor(item.ai_suggestion)}`}>
              {item.ai_suggestion.charAt(0).toUpperCase() + item.ai_suggestion.slice(1)}
            </span>
          </div>
        )}
      </div>

      {/* Item Details */}
      <div className="mb-6">
        <div className="flex items-start justify-between mb-3">
          <div>
            <h3 className={`font-poppins font-bold text-gray-900 mb-1 capitalize ${viewMode === 'list' ? 'text-2xl' : 'text-lg'}`}>
              {item.category}
            </h3>
            {item.brand && (
              <p className="font-inter text-gray-600 text-sm">
                {item.brand}
              </p>
            )}
          </div>
        </div>

        {/* Item Properties */}
        <div className="space-y-2 mb-4">
          {item.material && (
            <div className="flex items-center gap-2">
              <span className="font-inter text-xs text-gray-500">Material:</span>
              <span className="font-inter text-sm text-gray-700 capitalize">{item.material}</span>
            </div>
          )}
          {item.season && (
            <div className="flex items-center gap-2">
              <span className="font-inter text-xs text-gray-500">Season:</span>
              <span className="font-inter text-sm text-gray-700 capitalize">{item.season}</span>
            </div>
          )}
          {item.pattern && (
            <div className="flex items-center gap-2">
              <span className="font-inter text-xs text-gray-500">Pattern:</span>
              <span className="font-inter text-sm text-gray-700 capitalize">{item.pattern}</span>
            </div>
          )}
        </div>

        {/* AI Reason */}
        {item.ai_reason && (
          <div className="bg-gray-50 rounded-xl p-4 mb-4">
            <p className="font-inter text-sm text-gray-600">
              <span className="font-semibold">AI Analysis:</span> {item.ai_reason}
            </p>
          </div>
        )}

        {/* Notes */}
        {item.notes && (
          <div className="mb-4">
            <p className="font-inter text-sm text-gray-600">
              <span className="font-semibold">Notes:</span> {item.notes}
            </p>
          </div>
        )}
      </div>

      {/* Decision Buttons */}
      {showDecisions && item.ai_suggestion && (
        <div className="grid grid-cols-3 gap-2">
          {['keep', 'alter', 'discard'].map((decision) => {
            const Icon = getSuggestionIcon(decision);
            const isSelected = item.user_decision === decision;
            
            return (
              <button
                key={decision}
                onClick={() => handleUserDecision(item.id, decision as 'keep' | 'alter' | 'discard')}
                className={`flex items-center justify-center gap-2 px-3 py-3 rounded-2xl transition-all duration-200 font-inter font-medium text-sm ${
                  isSelected 
                    ? getSuggestionColor(decision)
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <Icon className="w-4 h-4" />
                <span className="capitalize">{decision}</span>
              </button>
            );
          })}
        </div>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Logo Header */}
      <div className="bg-white/95 backdrop-blur-sm border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex justify-center">
            <img 
              src="/new footer.png" 
              alt="AURAA Logo" 
              className="w-20 h-20 sm:w-24 sm:h-24 md:w-28 md:h-28 lg:w-32 lg:h-32 object-contain"
            />
          </div>
        </div>
      </div>

      {/* Breadcrumb Navigation */}
      <div className="py-4">
        <Breadcrumb items={getBreadcrumbItems()} />
      </div>

      {/* Existing Inventory View */}
      {currentView === 'existing-inventory' && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              Your Wardrobe Inventory
            </h1>
            <p className="font-inter text-xl text-gray-600 max-w-3xl mx-auto">
              Here's your current digital wardrobe. Ready to add more items for decluttering?
            </p>
          </div>

          {/* Search and Filters */}
          <div className="bg-white rounded-3xl p-6 shadow-sm border border-gray-100 mb-8">
            <div className="flex flex-col lg:flex-row gap-4">
              {/* Search */}
              <div className="relative flex-1">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search your wardrobe..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl font-inter focus:outline-none focus:border-gray-900 transition-colors duration-200"
                />
              </div>

              {/* Category Filter */}
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-4 py-3 border border-gray-200 rounded-2xl font-inter focus:outline-none focus:border-gray-900 transition-colors duration-200"
              >
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </option>
                ))}
              </select>

              {/* View Mode */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-3 rounded-xl transition-colors duration-200 ${
                    viewMode === 'grid' ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-600'
                  }`}
                >
                  <Grid3X3 className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-3 rounded-xl transition-colors duration-200 ${
                    viewMode === 'list' ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-600'
                  }`}
                >
                  <List className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Inventory Stats */}
          <div className="grid grid-cols-1 sm:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-gray-900 mb-2">
                {existingItems.length}
              </div>
              <p className="font-inter text-gray-600">Total Items</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-blue-600 mb-2">
                {existingItems.filter(item => item.category === 'tops').length}
              </div>
              <p className="font-inter text-gray-600">Tops</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-green-600 mb-2">
                {existingItems.filter(item => item.category === 'bottoms').length}
              </div>
              <p className="font-inter text-gray-600">Bottoms</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-purple-600 mb-2">
                {existingItems.filter(item => item.category === 'outerwear').length}
              </div>
              <p className="font-inter text-gray-600">Outerwear</p>
            </div>
          </div>

          {/* Items Grid */}
          <div className={`grid gap-8 mb-12 ${
            viewMode === 'grid' 
              ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
              : 'grid-cols-1'
          }`}>
            {getFilteredItems(existingItems).map((item) => (
              <WardrobeItemCard key={item.id} item={item} />
            ))}
          </div>

          {/* Declutter Prompt */}
          <div className="text-center mb-12">
            <div className="bg-white rounded-3xl p-12 shadow-sm border border-gray-100 max-w-2xl mx-auto">
              <Sparkles className="w-16 h-16 mx-auto mb-6 text-gray-900" />
              <h2 className="font-poppins font-bold text-3xl text-gray-900 mb-6">
                Ready to Declutter More?
              </h2>
              <p className="font-inter text-lg text-gray-600 mb-8">
                Do you want to add new items to your wardrobe for AI-powered decluttering analysis?
              </p>
              
              <button
                onClick={() => setCurrentView('new-upload')}
                className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-800 inline-flex items-center gap-3 text-lg"
              >
                <Plus className="w-6 h-6" />
                Yes, Add New Items to Declutter
              </button>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <button
              onClick={onBack}
              className="flex items-center gap-3 px-6 py-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 font-inter font-medium"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Options
            </button>

            <button
              onClick={() => onComplete && onComplete({ existingItems, action: 'skip-declutter' })}
              className="bg-gray-100 text-gray-700 font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-200 inline-flex items-center gap-3"
            >
              Skip Declutter for Now
              <ArrowRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* New Items Upload View */}
      {currentView === 'new-upload' && (
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              Add New Items to Declutter
            </h1>
            <p className="font-inter text-xl text-gray-600 max-w-3xl mx-auto">
              Upload photos of new clothing items to get AI-powered decluttering recommendations
            </p>
          </div>

          {/* Important Notice */}
          <div className="bg-blue-50 border border-blue-200 rounded-2xl p-6 mb-8">
            <div className="flex items-center gap-3">
              <Info className="w-6 h-6 text-blue-600 flex-shrink-0" />
              <div>
                <h3 className="font-poppins font-bold text-blue-900 mb-2">
                  Only New Items Will Be Analyzed
                </h3>
                <p className="font-inter text-blue-700">
                  This declutter session will only analyze the new items you upload here. 
                  Your existing wardrobe items will remain unchanged.
                </p>
              </div>
            </div>
          </div>

          {/* Upload Zone */}
          <div className="bg-white rounded-3xl p-8 shadow-sm border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors duration-200 mb-8">
            <div className="text-center">
              <Upload className="w-16 h-16 mx-auto mb-6 text-gray-400" />
              <h3 className="font-poppins font-bold text-2xl text-gray-900 mb-4">
                Upload Clothing Photos
              </h3>
              <p className="font-inter text-gray-600 mb-6">
                Drag and drop images here, or click to select files
              </p>
              
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => handleFileUpload(e.target.files)}
                className="hidden"
                id="file-upload"
              />
              <label
                htmlFor="file-upload"
                className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl cursor-pointer hover:bg-gray-800 transition-colors duration-200 inline-flex items-center gap-3"
              >
                <Camera className="w-5 h-5" />
                Choose Files
              </label>
              
              <p className="font-inter text-sm text-gray-500 mt-4">
                Supports JPG, PNG, HEIC. Max 10MB per file.
              </p>
            </div>
          </div>

          {/* Uploaded Items */}
          {newItems.length > 0 && (
            <div className="mb-8">
              <h3 className="font-poppins font-bold text-2xl text-gray-900 mb-6">
                New Items ({newItems.length})
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {newItems.map((item) => (
                  <div key={item.id} className="bg-white rounded-3xl p-6 shadow-sm border border-gray-100">
                    <div className="flex gap-6">
                      {/* Image */}
                      <div className="w-32 h-32 bg-gray-200 rounded-2xl overflow-hidden flex-shrink-0">
                        <img 
                          src={item.image_url} 
                          alt="Clothing item"
                          className="w-full h-full object-cover"
                        />
                      </div>
                      
                      {/* Details Form */}
                      <div className="flex-1 space-y-4">
                        <div>
                          <label className="block font-inter text-sm font-medium text-gray-700 mb-2">
                            Category
                          </label>
                          <select
                            value={item.category}
                            onChange={(e) => updateItemDetails(item.id, { category: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-200 rounded-xl font-inter focus:outline-none focus:border-gray-900"
                          >
                            <option value="tops">Tops</option>
                            <option value="bottoms">Bottoms</option>
                            <option value="outerwear">Outerwear</option>
                            <option value="dresses">Dresses</option>
                            <option value="shoes">Shoes</option>
                            <option value="accessories">Accessories</option>
                          </select>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-3">
                          <div>
                            <label className="block font-inter text-sm font-medium text-gray-700 mb-2">
                              Brand
                            </label>
                            <input
                              type="text"
                              value={item.brand || ''}
                              onChange={(e) => updateItemDetails(item.id, { brand: e.target.value })}
                              className="w-full px-3 py-2 border border-gray-200 rounded-xl font-inter focus:outline-none focus:border-gray-900"
                              placeholder="Brand name"
                            />
                          </div>
                          
                          <div>
                            <label className="block font-inter text-sm font-medium text-gray-700 mb-2">
                              Material
                            </label>
                            <input
                              type="text"
                              value={item.material || ''}
                              onChange={(e) => updateItemDetails(item.id, { material: e.target.value })}
                              className="w-full px-3 py-2 border border-gray-200 rounded-xl font-inter focus:outline-none focus:border-gray-900"
                              placeholder="e.g., Cotton"
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label className="block font-inter text-sm font-medium text-gray-700 mb-2">
                            Notes
                          </label>
                          <input
                            type="text"
                            value={item.notes || ''}
                            onChange={(e) => updateItemDetails(item.id, { notes: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-200 rounded-xl font-inter focus:outline-none focus:border-gray-900"
                            placeholder="Any additional notes"
                          />
                        </div>
                      </div>
                      
                      {/* Remove Button */}
                      <button
                        onClick={() => removeNewItem(item.id)}
                        className="p-2 text-gray-400 hover:text-red-600 transition-colors duration-200"
                      >
                        <X className="w-5 h-5" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <button
              onClick={() => setCurrentView('existing-inventory')}
              className="flex items-center gap-3 px-6 py-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 font-inter font-medium"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Inventory
            </button>

            {newItems.length > 0 && (
              <button
                onClick={startAIAnalysis}
                className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-800 inline-flex items-center gap-3"
              >
                Start AI Analysis
                <Sparkles className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      )}

      {/* AI Analysis View */}
      {currentView === 'ai-analysis' && (
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center">
            <div className="w-24 h-24 mx-auto mb-8 relative">
              <div className="absolute inset-0 border-4 border-gray-200 rounded-full"></div>
              <div className="absolute inset-0 border-4 border-gray-900 rounded-full border-t-transparent animate-spin"></div>
              <Sparkles className="w-12 h-12 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-gray-900" />
            </div>
            
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              AI Analysis in Progress
            </h1>
            <p className="font-inter text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
              Our AI is analyzing your new items and generating personalized declutter recommendations
            </p>
            
            {/* Progress Bar */}
            <div className="w-full max-w-md mx-auto mb-8">
              <div className="bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-gray-900 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${analysisProgress}%` }}
                ></div>
              </div>
              <p className="font-inter text-sm text-gray-600 mt-2">
                {analysisProgress}% Complete
              </p>
            </div>
            
            <div className="space-y-4 text-left max-w-md mx-auto">
              <div className="flex items-center gap-3">
                <div className="w-2 h-2 bg-gray-900 rounded-full"></div>
                <span className="font-inter text-gray-600">Analyzing style compatibility</span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-2 h-2 bg-gray-900 rounded-full"></div>
                <span className="font-inter text-gray-600">Evaluating wardrobe gaps</span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-2 h-2 bg-gray-900 rounded-full"></div>
                <span className="font-inter text-gray-600">Generating recommendations</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Declutter Decisions View */}
      {currentView === 'declutter-decisions' && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              AI Declutter Recommendations
            </h1>
            <p className="font-inter text-xl text-gray-600 max-w-3xl mx-auto">
              Review AI suggestions for your new items and make your final decisions
            </p>
          </div>

          {/* Decision Summary */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8">
            <div className="bg-green-50 border border-green-200 rounded-2xl p-6 text-center">
              <div className="font-poppins font-bold text-3xl text-green-600 mb-2">
                {newItems.filter(item => (item.user_decision || item.ai_suggestion) === 'keep').length}
              </div>
              <p className="font-inter text-green-700">Items to Keep</p>
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-2xl p-6 text-center">
              <div className="font-poppins font-bold text-3xl text-yellow-600 mb-2">
                {newItems.filter(item => (item.user_decision || item.ai_suggestion) === 'alter').length}
              </div>
              <p className="font-inter text-yellow-700">Items to Alter</p>
            </div>
            <div className="bg-red-50 border border-red-200 rounded-2xl p-6 text-center">
              <div className="font-poppins font-bold text-3xl text-red-600 mb-2">
                {newItems.filter(item => (item.user_decision || item.ai_suggestion) === 'discard').length}
              </div>
              <p className="font-inter text-red-700">Items to Discard</p>
            </div>
          </div>

          {/* Items Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            {newItems.map((item) => (
              <WardrobeItemCard key={item.id} item={item} showDecisions={true} />
            ))}
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <button
              onClick={() => setCurrentView('new-upload')}
              className="flex items-center gap-3 px-6 py-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 font-inter font-medium"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Upload
            </button>

            <button
              onClick={proceedToGapMap}
              className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-800 inline-flex items-center gap-3"
            >
              View Wardrobe Gap Map
              <ArrowRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* Gap Map View */}
      {currentView === 'gap-map' && (
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              Wardrobe Gap Map
            </h1>
            <p className="font-inter text-xl text-gray-600 max-w-3xl mx-auto">
              Based on your declutter decisions, here are our recommendations to complete your wardrobe
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12">
            {/* Recommended Additions */}
            <div>
              <h2 className="font-poppins font-bold text-2xl text-gray-900 mb-6 flex items-center gap-3">
                <Target className="w-6 h-6 text-gray-900" />
                Recommended Additions
              </h2>
              
              <div className="space-y-4">
                {gapMapItems.map((item, index) => (
                  <div key={index} className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="font-poppins font-bold text-lg text-gray-900">
                        {item.item}
                      </h3>
                      <span className={`px-3 py-1 rounded-full font-inter text-xs font-medium ${getPriorityColor(item.priority)}`}>
                        {item.priority} priority
                      </span>
                    </div>
                    <p className="font-inter text-gray-600 mb-4">
                      {item.reason}
                    </p>
                    <button className="bg-gray-900 text-white font-inter font-medium px-4 py-2 rounded-xl hover:bg-gray-800 transition-colors duration-200 inline-flex items-center gap-2">
                      <ShoppingBag className="w-4 h-4" />
                      Shop Now
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Well-Stocked Categories */}
            <div>
              <h2 className="font-poppins font-bold text-2xl text-gray-900 mb-6 flex items-center gap-3">
                <TrendingUp className="w-6 h-6 text-gray-900" />
                Well-Stocked Categories
              </h2>
              
              <div className="space-y-4">
                {wellStockedCategories.map((category, index) => (
                  <div key={index} className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-poppins font-bold text-lg text-gray-900">
                        {category.category}
                      </h3>
                      <span className="font-poppins font-bold text-2xl text-gray-600">
                        {category.count}
                      </span>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className={`px-3 py-1 rounded-full font-inter text-xs font-medium ${getStatusColor(category.status)}`}>
                        {category.message}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <button
              onClick={() => setCurrentView('declutter-decisions')}
              className="flex items-center gap-3 px-6 py-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 font-inter font-medium"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Decisions
            </button>

            <button
              onClick={proceedToFinalInventory}
              className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-800 inline-flex items-center gap-3"
            >
              View Complete Wardrobe
              <Package className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* Final Inventory View */}
      {currentView === 'final-inventory' && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="font-poppins font-bold text-4xl sm:text-5xl text-gray-900 mb-6">
              Your Complete Digital Wardrobe
            </h1>
            <p className="font-inter text-xl text-gray-600 max-w-3xl mx-auto">
              Here's your updated wardrobe including existing items and newly added pieces
            </p>
          </div>

          {/* Search and Filters */}
          <div className="bg-white rounded-3xl p-6 shadow-sm border border-gray-100 mb-8">
            <div className="flex flex-col lg:flex-row gap-4">
              {/* Search */}
              <div className="relative flex-1">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search your complete wardrobe..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl font-inter focus:outline-none focus:border-gray-900 transition-colors duration-200"
                />
              </div>

              {/* Category Filter */}
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-4 py-3 border border-gray-200 rounded-2xl font-inter focus:outline-none focus:border-gray-900 transition-colors duration-200"
              >
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </option>
                ))}
              </select>

              {/* View Mode */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-3 rounded-xl transition-colors duration-200 ${
                    viewMode === 'grid' ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-600'
                  }`}
                >
                  <Grid3X3 className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-3 rounded-xl transition-colors duration-200 ${
                    viewMode === 'list' ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-600'
                  }`}
                >
                  <List className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Updated Stats */}
          <div className="grid grid-cols-1 sm:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-gray-900 mb-2">
                {allItems.length}
              </div>
              <p className="font-inter text-gray-600">Total Items</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-blue-600 mb-2">
                {existingItems.length}
              </div>
              <p className="font-inter text-gray-600">Existing Items</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-green-600 mb-2">
                {newItems.filter(item => item.user_decision === 'keep' || item.user_decision === 'alter').length}
              </div>
              <p className="font-inter text-gray-600">New Items Added</p>
            </div>
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 text-center">
              <div className="font-poppins font-bold text-3xl text-red-600 mb-2">
                {newItems.filter(item => item.user_decision === 'discard').length}
              </div>
              <p className="font-inter text-gray-600">Items Discarded</p>
            </div>
          </div>

          {/* Complete Wardrobe Grid */}
          <div className={`grid gap-8 mb-12 ${
            viewMode === 'grid' 
              ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
              : 'grid-cols-1'
          }`}>
            {getFilteredItems(allItems).map((item) => (
              <WardrobeItemCard key={item.id} item={item} />
            ))}
          </div>

          {/* Completion Message */}
          <div className="text-center mb-12">
            <div className="bg-green-50 border border-green-200 rounded-3xl p-12 max-w-2xl mx-auto">
              <Check className="w-16 h-16 mx-auto mb-6 text-green-600" />
              <h2 className="font-poppins font-bold text-3xl text-gray-900 mb-6">
                Wardrobe Transformation Complete!
              </h2>
              <p className="font-inter text-lg text-gray-600 mb-8">
                Your digital wardrobe has been updated with your declutter decisions. 
                You now have a curated collection that aligns with your style profile.
              </p>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <button
              onClick={() => setCurrentView('gap-map')}
              className="flex items-center gap-3 px-6 py-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 font-inter font-medium"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Gap Map
            </button>

            <button
              onClick={() => onComplete && onComplete({ 
                existingItems, 
                newItems: newItems.filter(item => item.user_decision === 'keep' || item.user_decision === 'alter'),
                discardedItems: newItems.filter(item => item.user_decision === 'discard'),
                gapMapItems,
                wellStockedCategories
              })}
              className="bg-gray-900 text-white font-inter font-semibold px-8 py-4 rounded-2xl transition-all duration-200 hover:bg-gray-800 inline-flex items-center gap-3"
            >
              Complete Wardrobe Transformation
              <Check className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default WardrobeTransformation;